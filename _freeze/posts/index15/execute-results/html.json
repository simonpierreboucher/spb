{
  "hash": "742accb6b86ece9a5339b2f899d86c95",
  "result": {
    "markdown": "---\ntitle: \"Shiny App with FMP api\"\nformat: html\neditor: visual\ncategories:\n  - Shiny App\n  - financialmodelingprep\n  - Backend\nauthor:\n  - name: Simon-Pierre Boucher\n    orcid: 0000-0002-3756-3937\n    email: simon-pierre.boucher.1@ulaval.ca\n    affiliations:\n      - name: Université Laval\n        address: 2325 Rue de l'Université\n        city: Québec\n        state: QC \n        postal-code: G1V 0A6\n---\n\n\n\n#### Stock Info \n\n```r\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(shiny)\nlibrary(DT)\nlibrary(shinythemes)\nui <- fluidPage(\n  theme = shinytheme(\"spacelab\"),  # Changer le thème global\n  titlePanel(\"Company Information\"),\n  sidebarLayout(\n    sidebarPanel(\n      textInput(\"symbol\", \"Enter Ticker Symbol (e.g., AAPL):\"),\n      selectInput(\"info_type\", \"Select Information Type:\",\n                  choices = c(\"Executive Compensation\", \"Company Notes\", \"Historical Employee Count\", \"Company Grade\", \"Key Executives\"),\n                  selected = \"Company Profile\"),\n      actionButton(\"submit\", \"Submit\")\n    ),\n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Data\", DTOutput(\"company_data\"))\n      )\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # Function to fetch data from API\n  getData <- function(symbol, info_type) {\n    url <- switch(info_type,\n                  \"Executive Compensation\" = paste0(\"https://financialmodelingprep.com/api/v4/governance/executive_compensation?symbol=\", symbol, \"&apikey=80a99c1566222d51909a6964da25976d\"),\n                  \"Company Notes\" = paste0(\"https://financialmodelingprep.com/api/v4/company-notes?symbol=\", symbol, \"&apikey=80a99c1566222d51909a6964da25976d\"),\n                  \"Historical Employee Count\" = paste0(\"https://financialmodelingprep.com/api/v4/historical/employee_count?symbol=\", symbol, \"&apikey=80a99c1566222d51909a6964da25976d\"),\n                  \"Company Grade\" = paste0(\"https://financialmodelingprep.com/api/v3/grade/\", symbol, \"?apikey=80a99c1566222d51909a6964da25976d\"),\n                  \"Key Executives\" = paste0(\"https://financialmodelingprep.com/api/v3/key-executives/\", symbol, \"?apikey=80a99c1566222d51909a6964da25976d\")\n    )\n    \n    response <- GET(url)\n    content <- content(response, \"text\", encoding = \"UTF-8\")\n    df <- as.data.frame(fromJSON(content))\n    return(df)\n  }\n  \n  # Reactive expression for fetching data\n  company_data <- eventReactive(input$submit, {\n    req(input$symbol)\n    req(input$info_type)\n    getData(input$symbol, input$info_type)\n  })\n  \n  output$company_data <- renderDT({\n    datatable(company_data(), extensions = 'Buttons', \n              options = list(scrollX=TRUE, lengthMenu = c(5000,10000),\n                             paging = TRUE, searching = TRUE,\n                             fixedColumns = FALSE, autoWidth = TRUE,\n                             ordering = TRUE, dom = 'Bfrtip'))\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n```\n\n\n#### Stock financial statement \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(shiny)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'shiny'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:jsonlite':\n\n    validate\n```\n:::\n\n```{.r .cell-code}\nlibrary(DT)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'DT'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:shiny':\n\n    dataTableOutput, renderDataTable\n```\n:::\n\n```{.r .cell-code}\nlibrary(shinythemes)\nlibrary(shinythemes)\nui <- fluidPage(\n  theme = shinytheme(\"spacelab\"),  # Changer le thème global\n  titlePanel(\"Financial Statements\"),\n  sidebarLayout(\n    sidebarPanel(\n      textInput(\"symbol\", \"Enter Ticker Symbol (e.g., AAPL):\"),\n      selectInput(\"statement\", \"Select Financial Statement:\",\n                  choices = c(\"Income Statement\", \"Balance Sheet Statement\", \"Cash Flow Statement\"),\n                  selected = \"Income Statement\"),\n      selectInput(\"period\", \"Select Period:\",\n                  choices = c(\"Annual\", \"Quarterly\"),\n                  selected = \"Annual\"),\n      actionButton(\"submit\", \"Submit\")\n    ),\n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Data\", DTOutput(\"financial_data\"))\n      )\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # Function to fetch data from API\n  getData <- function(symbol, statement, period) {\n    statement_type <- switch(statement,\n                             \"Income Statement\" = \"income-statement\",\n                             \"Balance Sheet Statement\" = \"balance-sheet-statement\",\n                             \"Cash Flow Statement\" = \"cash-flow-statement\")\n    \n    period_type <- switch(period,\n                          \"Annual\" = \"annual\",\n                          \"Quarterly\" = \"quarter\")\n    \n    url <- paste0(\"https://financialmodelingprep.com/api/v3/\", statement_type, \"/\", symbol, \"?period=\", period_type, \"&apikey=80a99c1566222d51909a6964da25976d\")\n    response <- GET(url)\n    content <- content(response, \"text\", encoding = \"UTF-8\")\n    df <- as.data.frame(fromJSON(content))\n    return(df)\n  }\n  \n  # Reactive expression for fetching data\n  financial_data <- eventReactive(input$submit, {\n    req(input$symbol)\n    req(input$statement)\n    req(input$period)\n    getData(input$symbol, input$statement, input$period)\n  })\n  \n  output$financial_data <- renderDT({\n    datatable(financial_data(), extensions = 'Buttons', \n              options = list(scrollX=TRUE, lengthMenu = c(5000,10000),\n                             paging = TRUE, searching = TRUE,\n                             fixedColumns = FALSE, autoWidth = TRUE,\n                             ordering = TRUE, dom = 'Bfrtip',\n                             buttons = list(\n                               list(\n                                 extend = \"collection\",\n                                 buttons = c('csv', 'excel'),\n                                 text = 'Download',\n                                 filename = \"financial_data\"\n                               )\n                             )\n              )\n    )\n  })\n}\n\nshinyApp(ui = ui, server = server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}